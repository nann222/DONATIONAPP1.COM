{"ast":null,"code":"import _objectSpread from\"C:/my project/Donation-App-master1/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from'react';import{connect}from'react-redux';import{createFeedback}from'../../actions/feedback';import{TextField,Button,Typography,Container,Grid,Paper,Rating}from'@mui/material';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FeedbackForm=_ref=>{let{createFeedback,history,match}=_ref;// Assuming the donation/request ID might come from URL params if feedback is specific\n// For generic feedback, this might not be needed or could be optional\nconst relatedId=match&&match.params&&match.params.id;const[formData,setFormData]=useState({rating:3,// Default rating\ncomment:'',feedbackType:relatedId?'Transaction':'General'// Example logic\n});const{rating,comment,feedbackType}=formData;const onChange=e=>setFormData(_objectSpread(_objectSpread({},formData),{},{[e.target.name]:e.target.value}));const onRatingChange=(event,newValue)=>{setFormData(_objectSpread(_objectSpread({},formData),{},{rating:newValue}));};const onSubmit=e=>{e.preventDefault();if(!comment){// Consider using the alert action here\nconsole.error('Comment is required for feedback');return;}const feedbackData=_objectSpread(_objectSpread({},formData),{},{relatedDonation:feedbackType==='Transaction'&&relatedId?relatedId:undefined// relatedRequest: feedbackType === 'Transaction' && relatedId ? relatedId : undefined, // if feedback can be for requests too\n});createFeedback(feedbackData,history);};return/*#__PURE__*/_jsxs(Container,{component:Paper,sx:{mt:4,p:3},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",gutterBottom:true,children:\"Submit Feedback\"}),/*#__PURE__*/_jsx(\"form\",{onSubmit:onSubmit,children:/*#__PURE__*/_jsxs(Grid,{container:true,spacing:2,children:[/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,children:[/*#__PURE__*/_jsx(Typography,{component:\"legend\",children:\"Rating\"}),/*#__PURE__*/_jsx(Rating,{name:\"rating\",value:rating,onChange:onRatingChange})]}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(TextField,{name:\"comment\",variant:\"outlined\",required:true,fullWidth:true,multiline:true,rows:4,label:\"Your Feedback/Comment\",value:comment,onChange:onChange})}),relatedId&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(Typography,{variant:\"caption\",children:[\"Feedback related to transaction ID: \",relatedId]})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(Button,{type:\"submit\",fullWidth:true,variant:\"contained\",color:\"primary\",children:\"Submit Feedback\"})})]})})]});};export default connect(null,{createFeedback})(FeedbackForm);","map":{"version":3,"names":["React","useState","connect","createFeedback","TextField","Button","Typography","Container","Grid","Paper","Rating","jsx","_jsx","jsxs","_jsxs","FeedbackForm","_ref","history","match","relatedId","params","id","formData","setFormData","rating","comment","feedbackType","onChange","e","_objectSpread","target","name","value","onRatingChange","event","newValue","onSubmit","preventDefault","console","error","feedbackData","relatedDonation","undefined","component","sx","mt","p","children","variant","gutterBottom","container","spacing","item","xs","required","fullWidth","multiline","rows","label","type","color"],"sources":["C:/my project/Donation-App-master1/frontend/src/components/feedback/FeedbackForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createFeedback } from '../../actions/feedback';\nimport { TextField, Button, Typography, Container, Grid, Paper, Rating } from '@mui/material';\n\nconst FeedbackForm = ({ createFeedback, history, match }) => {\n  // Assuming the donation/request ID might come from URL params if feedback is specific\n  // For generic feedback, this might not be needed or could be optional\n  const relatedId = match && match.params && match.params.id; \n\n  const [formData, setFormData] = useState({\n    rating: 3, // Default rating\n    comment: '',\n    feedbackType: relatedId ? 'Transaction' : 'General' // Example logic\n  });\n\n  const { rating, comment, feedbackType } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  \n  const onRatingChange = (event, newValue) => {\n    setFormData({ ...formData, rating: newValue });\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (!comment) {\n      // Consider using the alert action here\n      console.error('Comment is required for feedback');\n      return;\n    }\n    const feedbackData = {\n      ...formData,\n      relatedDonation: feedbackType === 'Transaction' && relatedId ? relatedId : undefined,\n      // relatedRequest: feedbackType === 'Transaction' && relatedId ? relatedId : undefined, // if feedback can be for requests too\n    };\n    createFeedback(feedbackData, history);\n  };\n\n  return (\n    <Container component={Paper} sx={{ mt: 4, p: 3 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Submit Feedback\n      </Typography>\n      <form onSubmit={onSubmit}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Typography component=\"legend\">Rating</Typography>\n            <Rating\n              name=\"rating\"\n              value={rating}\n              onChange={onRatingChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              name=\"comment\"\n              variant=\"outlined\"\n              required\n              fullWidth\n              multiline\n              rows={4}\n              label=\"Your Feedback/Comment\"\n              value={comment}\n              onChange={onChange}\n            />\n          </Grid>\n           {/* Optional: Field for feedback type if not derived \n           <Grid item xs={12} sm={6}>\n            <TextField\n              name=\"feedbackType\"\n              variant=\"outlined\"\n              required\n              fullWidth\n              label=\"Feedback Type (e.g., General, Transaction)\"\n              value={feedbackType}\n              onChange={onChange}\n            />\n          </Grid>\n          */}\n          {relatedId && (\n            <Grid item xs={12}>\n              <Typography variant=\"caption\">\n                Feedback related to transaction ID: {relatedId}\n              </Typography>\n            </Grid>\n          )}\n          <Grid item xs={12}>\n            <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\n              Submit Feedback\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </Container>\n  );\n};\n\nFeedbackForm.propTypes = {\n  createFeedback: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired,\n  match: PropTypes.object // If using react-router and expecting params\n};\n\nexport default connect(null, { createFeedback })(FeedbackForm);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}