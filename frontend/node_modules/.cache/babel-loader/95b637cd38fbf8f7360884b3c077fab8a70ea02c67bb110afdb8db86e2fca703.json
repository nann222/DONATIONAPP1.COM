{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_NOTIFICATIONS, GET_NOTIFICATION, NOTIFICATION_ERROR, CREATE_NOTIFICATION, MARK_NOTIFICATION_READ, MARK_ALL_NOTIFICATIONS_READ, DELETE_NOTIFICATION, GET_NOTIFICATION_COUNT } from './types';\n\n// Get all notifications for current user\nexport const getNotifications = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/notifications');\n    dispatch({\n      type: GET_NOTIFICATIONS,\n      payload: res.data\n    });\n  } catch (err) {\n    var _err$response, _err$response2;\n    dispatch({\n      type: NOTIFICATION_ERROR,\n      payload: {\n        msg: (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.statusText,\n        status: (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status\n      }\n    });\n  }\n};\n\n// Get unread notification count\nexport const getNotificationCount = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/notifications/count');\n    dispatch({\n      type: GET_NOTIFICATION_COUNT,\n      payload: res.data.count\n    });\n  } catch (err) {\n    var _err$response3, _err$response4;\n    dispatch({\n      type: NOTIFICATION_ERROR,\n      payload: {\n        msg: (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.statusText,\n        status: (_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.status\n      }\n    });\n  }\n};\n\n// Mark notification as read\nexport const markNotificationRead = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/notifications/${id}/read`);\n    dispatch({\n      type: MARK_NOTIFICATION_READ,\n      payload: res.data\n    });\n  } catch (err) {\n    var _err$response5, _err$response6;\n    dispatch({\n      type: NOTIFICATION_ERROR,\n      payload: {\n        msg: (_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : _err$response5.statusText,\n        status: (_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : _err$response6.status\n      }\n    });\n  }\n};\n\n// Mark all notifications as read\nexport const markAllNotificationsRead = () => async dispatch => {\n  try {\n    await axios.put('/api/notifications/read-all');\n    dispatch({\n      type: MARK_ALL_NOTIFICATIONS_READ\n    });\n    dispatch(setAlert('All notifications marked as read', 'success'));\n  } catch (err) {\n    var _err$response7, _err$response8;\n    dispatch({\n      type: NOTIFICATION_ERROR,\n      payload: {\n        msg: (_err$response7 = err.response) === null || _err$response7 === void 0 ? void 0 : _err$response7.statusText,\n        status: (_err$response8 = err.response) === null || _err$response8 === void 0 ? void 0 : _err$response8.status\n      }\n    });\n    dispatch(setAlert('Error marking notifications as read', 'error'));\n  }\n};\n\n// Delete notification\nexport const deleteNotification = id => async dispatch => {\n  try {\n    await axios.delete(`/api/notifications/${id}`);\n    dispatch({\n      type: DELETE_NOTIFICATION,\n      payload: id\n    });\n    dispatch(setAlert('Notification deleted', 'success'));\n  } catch (err) {\n    var _err$response9, _err$response0;\n    dispatch({\n      type: NOTIFICATION_ERROR,\n      payload: {\n        msg: (_err$response9 = err.response) === null || _err$response9 === void 0 ? void 0 : _err$response9.statusText,\n        status: (_err$response0 = err.response) === null || _err$response0 === void 0 ? void 0 : _err$response0.status\n      }\n    });\n    dispatch(setAlert('Error deleting notification', 'error'));\n  }\n};\n\n// Create notification (admin only)\nexport const createNotification = notificationData => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const res = await axios.post('/api/notifications', notificationData, config);\n    dispatch({\n      type: CREATE_NOTIFICATION,\n      payload: res.data\n    });\n    dispatch(setAlert('Notification created successfully', 'success'));\n  } catch (err) {\n    var _err$response1, _err$response10;\n    dispatch({\n      type: NOTIFICATION_ERROR,\n      payload: {\n        msg: (_err$response1 = err.response) === null || _err$response1 === void 0 ? void 0 : _err$response1.statusText,\n        status: (_err$response10 = err.response) === null || _err$response10 === void 0 ? void 0 : _err$response10.status\n      }\n    });\n    dispatch(setAlert('Error creating notification', 'error'));\n  }\n};","map":{"version":3,"names":["axios","setAlert","GET_NOTIFICATIONS","GET_NOTIFICATION","NOTIFICATION_ERROR","CREATE_NOTIFICATION","MARK_NOTIFICATION_READ","MARK_ALL_NOTIFICATIONS_READ","DELETE_NOTIFICATION","GET_NOTIFICATION_COUNT","getNotifications","dispatch","res","get","type","payload","data","err","_err$response","_err$response2","msg","response","statusText","status","getNotificationCount","count","_err$response3","_err$response4","markNotificationRead","id","put","_err$response5","_err$response6","markAllNotificationsRead","_err$response7","_err$response8","deleteNotification","delete","_err$response9","_err$response0","createNotification","notificationData","config","headers","post","_err$response1","_err$response10"],"sources":["C:/my project/Donation-App-master1/frontend/src/actions/notification.js"],"sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  GET_NOTIFICATIONS,\r\n  GET_NOTIFICATION,\r\n  NOTIFICATION_ERROR,\r\n  CREATE_NOTIFICATION,\r\n  MARK_NOTIFICATION_READ,\r\n  MARK_ALL_NOTIFICATIONS_READ,\r\n  DELETE_NOTIFICATION,\r\n  GET_NOTIFICATION_COUNT\r\n} from './types';\r\n\r\n// Get all notifications for current user\r\nexport const getNotifications = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get('/api/notifications');\r\n    dispatch({\r\n      type: GET_NOTIFICATIONS,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NOTIFICATION_ERROR,\r\n      payload: { msg: err.response?.statusText, status: err.response?.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Get unread notification count\r\nexport const getNotificationCount = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get('/api/notifications/count');\r\n    dispatch({\r\n      type: GET_NOTIFICATION_COUNT,\r\n      payload: res.data.count\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NOTIFICATION_ERROR,\r\n      payload: { msg: err.response?.statusText, status: err.response?.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Mark notification as read\r\nexport const markNotificationRead = (id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.put(`/api/notifications/${id}/read`);\r\n    dispatch({\r\n      type: MARK_NOTIFICATION_READ,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NOTIFICATION_ERROR,\r\n      payload: { msg: err.response?.statusText, status: err.response?.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Mark all notifications as read\r\nexport const markAllNotificationsRead = () => async (dispatch) => {\r\n  try {\r\n    await axios.put('/api/notifications/read-all');\r\n    dispatch({\r\n      type: MARK_ALL_NOTIFICATIONS_READ\r\n    });\r\n    dispatch(setAlert('All notifications marked as read', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NOTIFICATION_ERROR,\r\n      payload: { msg: err.response?.statusText, status: err.response?.status }\r\n    });\r\n    dispatch(setAlert('Error marking notifications as read', 'error'));\r\n  }\r\n};\r\n\r\n// Delete notification\r\nexport const deleteNotification = (id) => async (dispatch) => {\r\n  try {\r\n    await axios.delete(`/api/notifications/${id}`);\r\n    dispatch({\r\n      type: DELETE_NOTIFICATION,\r\n      payload: id\r\n    });\r\n    dispatch(setAlert('Notification deleted', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NOTIFICATION_ERROR,\r\n      payload: { msg: err.response?.statusText, status: err.response?.status }\r\n    });\r\n    dispatch(setAlert('Error deleting notification', 'error'));\r\n  }\r\n};\r\n\r\n// Create notification (admin only)\r\nexport const createNotification = (notificationData) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  try {\r\n    const res = await axios.post('/api/notifications', notificationData, config);\r\n    dispatch({\r\n      type: CREATE_NOTIFICATION,\r\n      payload: res.data\r\n    });\r\n    dispatch(setAlert('Notification created successfully', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NOTIFICATION_ERROR,\r\n      payload: { msg: err.response?.statusText, status: err.response?.status }\r\n    });\r\n    dispatch(setAlert('Error creating notification', 'error'));\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}