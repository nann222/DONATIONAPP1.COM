{"ast":null,"code":"import { GET_NOTIFICATIONS, GET_NOTIFICATION, NOTIFICATION_ERROR, CREATE_NOTIFICATION, MARK_NOTIFICATION_READ, MARK_ALL_NOTIFICATIONS_READ, DELETE_NOTIFICATION, GET_NOTIFICATION_COUNT } from '../actions/types';\nconst initialState = {\n  notifications: [],\n  notification: null,\n  loading: true,\n  error: {},\n  unreadCount: 0\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n  switch (type) {\n    case GET_NOTIFICATIONS:\n      return {\n        ...state,\n        notifications: payload,\n        loading: false\n      };\n    case GET_NOTIFICATION:\n      return {\n        ...state,\n        notification: payload,\n        loading: false\n      };\n    case CREATE_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [payload, ...state.notifications],\n        loading: false\n      };\n    case MARK_NOTIFICATION_READ:\n      return {\n        ...state,\n        notifications: state.notifications.map(notification => notification._id === payload ? {\n          ...notification,\n          read: true\n        } : notification),\n        unreadCount: Math.max(0, state.unreadCount - 1)\n      };\n    case MARK_ALL_NOTIFICATIONS_READ:\n      return {\n        ...state,\n        notifications: state.notifications.map(notification => ({\n          ...notification,\n          read: true\n        })),\n        unreadCount: 0\n      };\n    case DELETE_NOTIFICATION:\n      return {\n        ...state,\n        notifications: state.notifications.filter(notification => notification._id !== payload)\n      };\n    case GET_NOTIFICATION_COUNT:\n      return {\n        ...state,\n        unreadCount: payload\n      };\n    case NOTIFICATION_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      };\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_NOTIFICATIONS","GET_NOTIFICATION","NOTIFICATION_ERROR","CREATE_NOTIFICATION","MARK_NOTIFICATION_READ","MARK_ALL_NOTIFICATIONS_READ","DELETE_NOTIFICATION","GET_NOTIFICATION_COUNT","initialState","notifications","notification","loading","error","unreadCount","state","action","type","payload","map","_id","read","Math","max","filter"],"sources":["C:/my project/Donation-App-master1/frontend/src/reducers/notification.js"],"sourcesContent":["import {\r\n  GET_NOTIFICATIONS,\r\n  GET_NOTIFICATION,\r\n  NOTIFICATION_ERROR,\r\n  CREATE_NOTIFICATION,\r\n  MARK_NOTIFICATION_READ,\r\n  MARK_ALL_NOTIFICATIONS_READ,\r\n  DELETE_NOTIFICATION,\r\n  GET_NOTIFICATION_COUNT\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  notifications: [],\r\n  notification: null,\r\n  loading: true,\r\n  error: {},\r\n  unreadCount: 0\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case GET_NOTIFICATIONS:\r\n      return {\r\n        ...state,\r\n        notifications: payload,\r\n        loading: false\r\n      };\r\n    case GET_NOTIFICATION:\r\n      return {\r\n        ...state,\r\n        notification: payload,\r\n        loading: false\r\n      };\r\n    case CREATE_NOTIFICATION:\r\n      return {\r\n        ...state,\r\n        notifications: [payload, ...state.notifications],\r\n        loading: false\r\n      };\r\n    case MARK_NOTIFICATION_READ:\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.map(notification =>\r\n          notification._id === payload ? { ...notification, read: true } : notification\r\n        ),\r\n        unreadCount: Math.max(0, state.unreadCount - 1)\r\n      };\r\n    case MARK_ALL_NOTIFICATIONS_READ:\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.map(notification => ({ ...notification, read: true })),\r\n        unreadCount: 0\r\n      };\r\n    case DELETE_NOTIFICATION:\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.filter(notification => notification._id !== payload)\r\n      };\r\n    case GET_NOTIFICATION_COUNT:\r\n      return {\r\n        ...state,\r\n        unreadCount: payload\r\n      };\r\n    case NOTIFICATION_ERROR:\r\n      return {\r\n        ...state,\r\n        error: payload,\r\n        loading: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}"],"mappings":"AAAA,SACEA,iBAAiB,EACjBC,gBAAgB,EAChBC,kBAAkB,EAClBC,mBAAmB,EACnBC,sBAAsB,EACtBC,2BAA2B,EAC3BC,mBAAmB,EACnBC,sBAAsB,QACjB,kBAAkB;AAEzB,MAAMC,YAAY,GAAG;EACnBC,aAAa,EAAE,EAAE;EACjBC,YAAY,EAAE,IAAI;EAClBC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,CAAC,CAAC;EACTC,WAAW,EAAE;AACf,CAAC;AAED,eAAe,UAASC,KAAK,GAAGN,YAAY,EAAEO,MAAM,EAAE;EACpD,MAAM;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAGF,MAAM;EAEhC,QAAQC,IAAI;IACV,KAAKhB,iBAAiB;MACpB,OAAO;QACL,GAAGc,KAAK;QACRL,aAAa,EAAEQ,OAAO;QACtBN,OAAO,EAAE;MACX,CAAC;IACH,KAAKV,gBAAgB;MACnB,OAAO;QACL,GAAGa,KAAK;QACRJ,YAAY,EAAEO,OAAO;QACrBN,OAAO,EAAE;MACX,CAAC;IACH,KAAKR,mBAAmB;MACtB,OAAO;QACL,GAAGW,KAAK;QACRL,aAAa,EAAE,CAACQ,OAAO,EAAE,GAAGH,KAAK,CAACL,aAAa,CAAC;QAChDE,OAAO,EAAE;MACX,CAAC;IACH,KAAKP,sBAAsB;MACzB,OAAO;QACL,GAAGU,KAAK;QACRL,aAAa,EAAEK,KAAK,CAACL,aAAa,CAACS,GAAG,CAACR,YAAY,IACjDA,YAAY,CAACS,GAAG,KAAKF,OAAO,GAAG;UAAE,GAAGP,YAAY;UAAEU,IAAI,EAAE;QAAK,CAAC,GAAGV,YACnE,CAAC;QACDG,WAAW,EAAEQ,IAAI,CAACC,GAAG,CAAC,CAAC,EAAER,KAAK,CAACD,WAAW,GAAG,CAAC;MAChD,CAAC;IACH,KAAKR,2BAA2B;MAC9B,OAAO;QACL,GAAGS,KAAK;QACRL,aAAa,EAAEK,KAAK,CAACL,aAAa,CAACS,GAAG,CAACR,YAAY,KAAK;UAAE,GAAGA,YAAY;UAAEU,IAAI,EAAE;QAAK,CAAC,CAAC,CAAC;QACzFP,WAAW,EAAE;MACf,CAAC;IACH,KAAKP,mBAAmB;MACtB,OAAO;QACL,GAAGQ,KAAK;QACRL,aAAa,EAAEK,KAAK,CAACL,aAAa,CAACc,MAAM,CAACb,YAAY,IAAIA,YAAY,CAACS,GAAG,KAAKF,OAAO;MACxF,CAAC;IACH,KAAKV,sBAAsB;MACzB,OAAO;QACL,GAAGO,KAAK;QACRD,WAAW,EAAEI;MACf,CAAC;IACH,KAAKf,kBAAkB;MACrB,OAAO;QACL,GAAGY,KAAK;QACRF,KAAK,EAAEK,OAAO;QACdN,OAAO,EAAE;MACX,CAAC;IACH;MACE,OAAOG,KAAK;EAChB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}