{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_DONATIONS, GET_DONATION, DONATION_ERROR, CREATE_DONATION } from './types';\n\n// Get donations\nexport const getDonations = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/donations');\n    dispatch({\n      type: GET_DONATIONS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: DONATION_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\n\n// Create donation\nexport const createNewDonation = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/donations', formData, config);\n    dispatch({\n      type: CREATE_DONATION,\n      payload: res.data\n    });\n    dispatch(setAlert('Donation created successfully', 'success'));\n    history.push('/donor/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n    }\n    dispatch({\n      type: DONATION_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\n\n// Get donation by ID\nexport const getDonationById = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/donations/${id}`);\n    dispatch({\n      type: GET_DONATION,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: DONATION_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\n\n// Create a new donation\nexport const createDonation = (formData, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const res = await axios.post('/api/donations', formData, config);\n    dispatch({\n      type: CREATE_DONATION,\n      payload: res.data\n    });\n    dispatch(setAlert('Donation Created', 'success'));\n    // Optionally redirect after creation\n    // history.push('/dashboard'); // Or wherever appropriate\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: DONATION_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"names":["axios","setAlert","GET_DONATIONS","GET_DONATION","DONATION_ERROR","CREATE_DONATION","getDonations","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","createNewDonation","formData","history","config","headers","post","push","errors","forEach","error","getDonationById","id","createDonation"],"sources":["C:/my project/Donation-App-master1/frontend/src/actions/donation.js"],"sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  GET_DONATIONS,\n  GET_DONATION,\n  DONATION_ERROR,\n  CREATE_DONATION\n} from './types';\n\n// Get donations\nexport const getDonations = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/donations');\n    dispatch({\n      type: GET_DONATIONS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: DONATION_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Create donation\nexport const createNewDonation = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    const res = await axios.post('/api/donations', formData, config);\n    dispatch({\n      type: CREATE_DONATION,\n      payload: res.data\n    });\n    dispatch(setAlert('Donation created successfully', 'success'));\n    history.push('/donor/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n    }\n    dispatch({\n      type: DONATION_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Get donation by ID\nexport const getDonationById = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/donations/${id}`);\n    dispatch({\n      type: GET_DONATION,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: DONATION_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Create a new donation\nexport const createDonation = (formData, history) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post('/api/donations', formData, config);\n    dispatch({\n      type: CREATE_DONATION,\n      payload: res.data\n    });\n    dispatch(setAlert('Donation Created', 'success'));\n    // Optionally redirect after creation\n    // history.push('/dashboard'); // Or wherever appropriate\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: DONATION_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}