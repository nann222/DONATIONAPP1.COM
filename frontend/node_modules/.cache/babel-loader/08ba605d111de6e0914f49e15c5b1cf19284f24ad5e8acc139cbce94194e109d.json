{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_FEEDBACKS, GET_FEEDBACK, FEEDBACK_ERROR, CREATE_FEEDBACK } from './types';\n\n// Get all feedbacks\nexport const getFeedbacks = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/feedbacks');\n    dispatch({\n      type: GET_FEEDBACKS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: FEEDBACK_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\n\n// Get feedback by ID\nexport const getFeedbackById = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/feedbacks/${id}`);\n    dispatch({\n      type: GET_FEEDBACK,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: FEEDBACK_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\n\n// Create new feedback\nexport const createFeedback = (formData, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const res = await axios.post('/api/feedbacks', formData, config);\n    dispatch({\n      type: CREATE_FEEDBACK,\n      payload: res.data\n    });\n    dispatch(setAlert('Feedback Submitted', 'success'));\n    // Optionally redirect\n    // history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: FEEDBACK_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"names":["axios","setAlert","GET_FEEDBACKS","GET_FEEDBACK","FEEDBACK_ERROR","CREATE_FEEDBACK","getFeedbacks","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getFeedbackById","id","createFeedback","formData","history","config","headers","post","errors","forEach","error"],"sources":["C:/my project/Donation-App-master1/frontend/src/actions/feedback.js"],"sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  GET_FEEDBACKS,\n  GET_FEEDBACK,\n  FEEDBACK_ERROR,\n  CREATE_FEEDBACK\n} from './types';\n\n// Get all feedbacks\nexport const getFeedbacks = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/feedbacks');\n    dispatch({\n      type: GET_FEEDBACKS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: FEEDBACK_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Get feedback by ID\nexport const getFeedbackById = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/feedbacks/${id}`);\n    dispatch({\n      type: GET_FEEDBACK,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: FEEDBACK_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Create new feedback\nexport const createFeedback = (formData, history) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post('/api/feedbacks', formData, config);\n    dispatch({\n      type: CREATE_FEEDBACK,\n      payload: res.data\n    });\n    dispatch(setAlert('Feedback Submitted', 'success'));\n    // Optionally redirect\n    // history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: FEEDBACK_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,SAAS;AAClC,SACEC,aAAa,EACbC,YAAY,EACZC,cAAc,EACdC,eAAe,QACV,SAAS;;AAEhB;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACpD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,gBAAgB,CAAC;IAC7CF,QAAQ,CAAC;MACPG,IAAI,EAAER,aAAa;MACnBS,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZN,QAAQ,CAAC;MACPG,IAAI,EAAEN,cAAc;MACpBO,OAAO,EAAE;QAAEG,GAAG,EAAED,GAAG,CAACE,QAAQ,CAACC,UAAU;QAAEC,MAAM,EAAEJ,GAAG,CAACE,QAAQ,CAACE;MAAO;IACvE,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAIC,EAAE,IAAK,MAAOZ,QAAQ,IAAK;EACzD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,kBAAkBU,EAAE,EAAE,CAAC;IACnDZ,QAAQ,CAAC;MACPG,IAAI,EAAEP,YAAY;MAClBQ,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZN,QAAQ,CAAC;MACPG,IAAI,EAAEN,cAAc;MACpBO,OAAO,EAAE;QAAEG,GAAG,EAAED,GAAG,CAACE,QAAQ,CAACC,UAAU;QAAEC,MAAM,EAAEJ,GAAG,CAACE,QAAQ,CAACE;MAAO;IACvE,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,GAAGA,CAACC,QAAQ,EAAEC,OAAO,KAAK,MAAOf,QAAQ,IAAK;EACvE,MAAMgB,MAAM,GAAG;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;EAED,IAAI;IACF,MAAMhB,GAAG,GAAG,MAAMR,KAAK,CAACyB,IAAI,CAAC,gBAAgB,EAAEJ,QAAQ,EAAEE,MAAM,CAAC;IAChEhB,QAAQ,CAAC;MACPG,IAAI,EAAEL,eAAe;MACrBM,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;IACFL,QAAQ,CAACN,QAAQ,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC;IACnD;IACA;EACF,CAAC,CAAC,OAAOY,GAAG,EAAE;IACZ,MAAMa,MAAM,GAAGb,GAAG,CAACE,QAAQ,CAACH,IAAI,CAACc,MAAM;IACvC,IAAIA,MAAM,EAAE;MACVA,MAAM,CAACC,OAAO,CAAEC,KAAK,IAAKrB,QAAQ,CAACN,QAAQ,CAAC2B,KAAK,CAACd,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IACpE;IACAP,QAAQ,CAAC;MACPG,IAAI,EAAEN,cAAc;MACpBO,OAAO,EAAE;QAAEG,GAAG,EAAED,GAAG,CAACE,QAAQ,CAACC,UAAU;QAAEC,MAAM,EAAEJ,GAAG,CAACE,QAAQ,CAACE;MAAO;IACvE,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}