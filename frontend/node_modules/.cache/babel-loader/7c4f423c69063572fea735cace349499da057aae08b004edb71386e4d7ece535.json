{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_REQUESTS, GET_REQUEST, REQUEST_ERROR, CREATE_REQUEST } from './types';\n\n// Get requests\nexport const getRequests = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/requests');\n    dispatch({\n      type: GET_REQUESTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: REQUEST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\n\n// Create request\nexport const submitNewRequest = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/requests', formData, config);\n    dispatch({\n      type: CREATE_REQUEST,\n      payload: res.data\n    });\n    dispatch(setAlert('Request created successfully', 'success'));\n    history.push('/recipient/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n    }\n    dispatch({\n      type: REQUEST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\n\n// Get request by ID\nexport const getRequestById = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/requests/${id}`);\n    dispatch({\n      type: GET_REQUEST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: REQUEST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\n\n// Create a new request\nexport const createRequest = (formData, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const res = await axios.post('/api/requests', formData, config);\n    dispatch({\n      type: CREATE_REQUEST,\n      payload: res.data\n    });\n    dispatch(setAlert('Request Created', 'success'));\n    // Optionally redirect after creation\n    // history.push('/dashboard'); // Or wherever appropriate\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: REQUEST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"names":["axios","setAlert","GET_REQUESTS","GET_REQUEST","REQUEST_ERROR","CREATE_REQUEST","getRequests","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","submitNewRequest","formData","history","config","headers","post","push","errors","forEach","error","getRequestById","id","createRequest"],"sources":["C:/my project/Donation-App-master1/frontend/src/actions/request.js"],"sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  GET_REQUESTS,\n  GET_REQUEST,\n  REQUEST_ERROR,\n  CREATE_REQUEST\n} from './types';\n\n// Get requests\nexport const getRequests = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/requests');\n    dispatch({\n      type: GET_REQUESTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: REQUEST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Create request\nexport const submitNewRequest = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    const res = await axios.post('/api/requests', formData, config);\n    dispatch({\n      type: CREATE_REQUEST,\n      payload: res.data\n    });\n    dispatch(setAlert('Request created successfully', 'success'));\n    history.push('/recipient/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n    }\n    dispatch({\n      type: REQUEST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Get request by ID\nexport const getRequestById = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/requests/${id}`);\n    dispatch({\n      type: GET_REQUEST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: REQUEST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Create a new request\nexport const createRequest = (formData, history) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post('/api/requests', formData, config);\n    dispatch({\n      type: CREATE_REQUEST,\n      payload: res.data\n    });\n    dispatch(setAlert('Request Created', 'success'));\n    // Optionally redirect after creation\n    // history.push('/dashboard'); // Or wherever appropriate\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: REQUEST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}