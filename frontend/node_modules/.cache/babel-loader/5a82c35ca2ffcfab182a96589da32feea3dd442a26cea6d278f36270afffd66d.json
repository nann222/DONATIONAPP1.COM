{"ast":null,"code":"import axios from'axios';import{setAlert}from'./alert';import{GET_NOTIFICATIONS,GET_NOTIFICATION,NOTIFICATION_ERROR,CREATE_NOTIFICATION,MARK_NOTIFICATION_READ,MARK_ALL_NOTIFICATIONS_READ,DELETE_NOTIFICATION,GET_NOTIFICATION_COUNT}from'./types';// Get all notifications for current user\nexport const getNotifications=()=>async dispatch=>{try{const res=await axios.get('/api/notifications');dispatch({type:GET_NOTIFICATIONS,payload:res.data});}catch(err){var _err$response,_err$response2;dispatch({type:NOTIFICATION_ERROR,payload:{msg:(_err$response=err.response)===null||_err$response===void 0?void 0:_err$response.statusText,status:(_err$response2=err.response)===null||_err$response2===void 0?void 0:_err$response2.status}});}};// Get unread notification count\nexport const getNotificationCount=()=>async dispatch=>{try{const res=await axios.get('/api/notifications/count');dispatch({type:GET_NOTIFICATION_COUNT,payload:res.data.count});}catch(err){var _err$response3,_err$response4;dispatch({type:NOTIFICATION_ERROR,payload:{msg:(_err$response3=err.response)===null||_err$response3===void 0?void 0:_err$response3.statusText,status:(_err$response4=err.response)===null||_err$response4===void 0?void 0:_err$response4.status}});}};// Mark notification as read\nexport const markNotificationRead=id=>async dispatch=>{try{const res=await axios.put(\"/api/notifications/\".concat(id,\"/read\"));dispatch({type:MARK_NOTIFICATION_READ,payload:res.data});}catch(err){var _err$response5,_err$response6;dispatch({type:NOTIFICATION_ERROR,payload:{msg:(_err$response5=err.response)===null||_err$response5===void 0?void 0:_err$response5.statusText,status:(_err$response6=err.response)===null||_err$response6===void 0?void 0:_err$response6.status}});}};// Mark all notifications as read\nexport const markAllNotificationsRead=()=>async dispatch=>{try{await axios.put('/api/notifications/read-all');dispatch({type:MARK_ALL_NOTIFICATIONS_READ});dispatch(setAlert('All notifications marked as read','success'));}catch(err){var _err$response7,_err$response8;dispatch({type:NOTIFICATION_ERROR,payload:{msg:(_err$response7=err.response)===null||_err$response7===void 0?void 0:_err$response7.statusText,status:(_err$response8=err.response)===null||_err$response8===void 0?void 0:_err$response8.status}});dispatch(setAlert('Error marking notifications as read','error'));}};// Delete notification\nexport const deleteNotification=id=>async dispatch=>{try{await axios.delete(\"/api/notifications/\".concat(id));dispatch({type:DELETE_NOTIFICATION,payload:id});dispatch(setAlert('Notification deleted','success'));}catch(err){var _err$response9,_err$response0;dispatch({type:NOTIFICATION_ERROR,payload:{msg:(_err$response9=err.response)===null||_err$response9===void 0?void 0:_err$response9.statusText,status:(_err$response0=err.response)===null||_err$response0===void 0?void 0:_err$response0.status}});dispatch(setAlert('Error deleting notification','error'));}};// Create notification (admin only)\nexport const createNotification=notificationData=>async dispatch=>{const config={headers:{'Content-Type':'application/json'}};try{const res=await axios.post('/api/notifications',notificationData,config);dispatch({type:CREATE_NOTIFICATION,payload:res.data});dispatch(setAlert('Notification created successfully','success'));}catch(err){var _err$response1,_err$response10;dispatch({type:NOTIFICATION_ERROR,payload:{msg:(_err$response1=err.response)===null||_err$response1===void 0?void 0:_err$response1.statusText,status:(_err$response10=err.response)===null||_err$response10===void 0?void 0:_err$response10.status}});dispatch(setAlert('Error creating notification','error'));}};","map":{"version":3,"names":["axios","setAlert","GET_NOTIFICATIONS","GET_NOTIFICATION","NOTIFICATION_ERROR","CREATE_NOTIFICATION","MARK_NOTIFICATION_READ","MARK_ALL_NOTIFICATIONS_READ","DELETE_NOTIFICATION","GET_NOTIFICATION_COUNT","getNotifications","dispatch","res","get","type","payload","data","err","_err$response","_err$response2","msg","response","statusText","status","getNotificationCount","count","_err$response3","_err$response4","markNotificationRead","id","put","concat","_err$response5","_err$response6","markAllNotificationsRead","_err$response7","_err$response8","deleteNotification","delete","_err$response9","_err$response0","createNotification","notificationData","config","headers","post","_err$response1","_err$response10"],"sources":["C:/my project/Donation-App-master1/frontend/src/actions/notification.js"],"sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  GET_NOTIFICATIONS,\r\n  GET_NOTIFICATION,\r\n  NOTIFICATION_ERROR,\r\n  CREATE_NOTIFICATION,\r\n  MARK_NOTIFICATION_READ,\r\n  MARK_ALL_NOTIFICATIONS_READ,\r\n  DELETE_NOTIFICATION,\r\n  GET_NOTIFICATION_COUNT\r\n} from './types';\r\n\r\n// Get all notifications for current user\r\nexport const getNotifications = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get('/api/notifications');\r\n    dispatch({\r\n      type: GET_NOTIFICATIONS,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NOTIFICATION_ERROR,\r\n      payload: { msg: err.response?.statusText, status: err.response?.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Get unread notification count\r\nexport const getNotificationCount = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get('/api/notifications/count');\r\n    dispatch({\r\n      type: GET_NOTIFICATION_COUNT,\r\n      payload: res.data.count\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NOTIFICATION_ERROR,\r\n      payload: { msg: err.response?.statusText, status: err.response?.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Mark notification as read\r\nexport const markNotificationRead = (id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.put(`/api/notifications/${id}/read`);\r\n    dispatch({\r\n      type: MARK_NOTIFICATION_READ,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NOTIFICATION_ERROR,\r\n      payload: { msg: err.response?.statusText, status: err.response?.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Mark all notifications as read\r\nexport const markAllNotificationsRead = () => async (dispatch) => {\r\n  try {\r\n    await axios.put('/api/notifications/read-all');\r\n    dispatch({\r\n      type: MARK_ALL_NOTIFICATIONS_READ\r\n    });\r\n    dispatch(setAlert('All notifications marked as read', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NOTIFICATION_ERROR,\r\n      payload: { msg: err.response?.statusText, status: err.response?.status }\r\n    });\r\n    dispatch(setAlert('Error marking notifications as read', 'error'));\r\n  }\r\n};\r\n\r\n// Delete notification\r\nexport const deleteNotification = (id) => async (dispatch) => {\r\n  try {\r\n    await axios.delete(`/api/notifications/${id}`);\r\n    dispatch({\r\n      type: DELETE_NOTIFICATION,\r\n      payload: id\r\n    });\r\n    dispatch(setAlert('Notification deleted', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NOTIFICATION_ERROR,\r\n      payload: { msg: err.response?.statusText, status: err.response?.status }\r\n    });\r\n    dispatch(setAlert('Error deleting notification', 'error'));\r\n  }\r\n};\r\n\r\n// Create notification (admin only)\r\nexport const createNotification = (notificationData) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  try {\r\n    const res = await axios.post('/api/notifications', notificationData, config);\r\n    dispatch({\r\n      type: CREATE_NOTIFICATION,\r\n      payload: res.data\r\n    });\r\n    dispatch(setAlert('Notification created successfully', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: NOTIFICATION_ERROR,\r\n      payload: { msg: err.response?.statusText, status: err.response?.status }\r\n    });\r\n    dispatch(setAlert('Error creating notification', 'error'));\r\n  }\r\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,KAAQ,SAAS,CAClC,OACEC,iBAAiB,CACjBC,gBAAgB,CAChBC,kBAAkB,CAClBC,mBAAmB,CACnBC,sBAAsB,CACtBC,2BAA2B,CAC3BC,mBAAmB,CACnBC,sBAAsB,KACjB,SAAS,CAEhB;AACA,MAAO,MAAM,CAAAC,gBAAgB,CAAGA,CAAA,GAAM,KAAO,CAAAC,QAAQ,EAAK,CACxD,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAZ,KAAK,CAACa,GAAG,CAAC,oBAAoB,CAAC,CACjDF,QAAQ,CAAC,CACPG,IAAI,CAAEZ,iBAAiB,CACvBa,OAAO,CAAEH,GAAG,CAACI,IACf,CAAC,CAAC,CACJ,CAAE,MAAOC,GAAG,CAAE,KAAAC,aAAA,CAAAC,cAAA,CACZR,QAAQ,CAAC,CACPG,IAAI,CAAEV,kBAAkB,CACxBW,OAAO,CAAE,CAAEK,GAAG,EAAAF,aAAA,CAAED,GAAG,CAACI,QAAQ,UAAAH,aAAA,iBAAZA,aAAA,CAAcI,UAAU,CAAEC,MAAM,EAAAJ,cAAA,CAAEF,GAAG,CAACI,QAAQ,UAAAF,cAAA,iBAAZA,cAAA,CAAcI,MAAO,CACzE,CAAC,CAAC,CACJ,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,oBAAoB,CAAGA,CAAA,GAAM,KAAO,CAAAb,QAAQ,EAAK,CAC5D,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAZ,KAAK,CAACa,GAAG,CAAC,0BAA0B,CAAC,CACvDF,QAAQ,CAAC,CACPG,IAAI,CAAEL,sBAAsB,CAC5BM,OAAO,CAAEH,GAAG,CAACI,IAAI,CAACS,KACpB,CAAC,CAAC,CACJ,CAAE,MAAOR,GAAG,CAAE,KAAAS,cAAA,CAAAC,cAAA,CACZhB,QAAQ,CAAC,CACPG,IAAI,CAAEV,kBAAkB,CACxBW,OAAO,CAAE,CAAEK,GAAG,EAAAM,cAAA,CAAET,GAAG,CAACI,QAAQ,UAAAK,cAAA,iBAAZA,cAAA,CAAcJ,UAAU,CAAEC,MAAM,EAAAI,cAAA,CAAEV,GAAG,CAACI,QAAQ,UAAAM,cAAA,iBAAZA,cAAA,CAAcJ,MAAO,CACzE,CAAC,CAAC,CACJ,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,oBAAoB,CAAIC,EAAE,EAAK,KAAO,CAAAlB,QAAQ,EAAK,CAC9D,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAZ,KAAK,CAAC8B,GAAG,uBAAAC,MAAA,CAAuBF,EAAE,SAAO,CAAC,CAC5DlB,QAAQ,CAAC,CACPG,IAAI,CAAER,sBAAsB,CAC5BS,OAAO,CAAEH,GAAG,CAACI,IACf,CAAC,CAAC,CACJ,CAAE,MAAOC,GAAG,CAAE,KAAAe,cAAA,CAAAC,cAAA,CACZtB,QAAQ,CAAC,CACPG,IAAI,CAAEV,kBAAkB,CACxBW,OAAO,CAAE,CAAEK,GAAG,EAAAY,cAAA,CAAEf,GAAG,CAACI,QAAQ,UAAAW,cAAA,iBAAZA,cAAA,CAAcV,UAAU,CAAEC,MAAM,EAAAU,cAAA,CAAEhB,GAAG,CAACI,QAAQ,UAAAY,cAAA,iBAAZA,cAAA,CAAcV,MAAO,CACzE,CAAC,CAAC,CACJ,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAW,wBAAwB,CAAGA,CAAA,GAAM,KAAO,CAAAvB,QAAQ,EAAK,CAChE,GAAI,CACF,KAAM,CAAAX,KAAK,CAAC8B,GAAG,CAAC,6BAA6B,CAAC,CAC9CnB,QAAQ,CAAC,CACPG,IAAI,CAAEP,2BACR,CAAC,CAAC,CACFI,QAAQ,CAACV,QAAQ,CAAC,kCAAkC,CAAE,SAAS,CAAC,CAAC,CACnE,CAAE,MAAOgB,GAAG,CAAE,KAAAkB,cAAA,CAAAC,cAAA,CACZzB,QAAQ,CAAC,CACPG,IAAI,CAAEV,kBAAkB,CACxBW,OAAO,CAAE,CAAEK,GAAG,EAAAe,cAAA,CAAElB,GAAG,CAACI,QAAQ,UAAAc,cAAA,iBAAZA,cAAA,CAAcb,UAAU,CAAEC,MAAM,EAAAa,cAAA,CAAEnB,GAAG,CAACI,QAAQ,UAAAe,cAAA,iBAAZA,cAAA,CAAcb,MAAO,CACzE,CAAC,CAAC,CACFZ,QAAQ,CAACV,QAAQ,CAAC,qCAAqC,CAAE,OAAO,CAAC,CAAC,CACpE,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAoC,kBAAkB,CAAIR,EAAE,EAAK,KAAO,CAAAlB,QAAQ,EAAK,CAC5D,GAAI,CACF,KAAM,CAAAX,KAAK,CAACsC,MAAM,uBAAAP,MAAA,CAAuBF,EAAE,CAAE,CAAC,CAC9ClB,QAAQ,CAAC,CACPG,IAAI,CAAEN,mBAAmB,CACzBO,OAAO,CAAEc,EACX,CAAC,CAAC,CACFlB,QAAQ,CAACV,QAAQ,CAAC,sBAAsB,CAAE,SAAS,CAAC,CAAC,CACvD,CAAE,MAAOgB,GAAG,CAAE,KAAAsB,cAAA,CAAAC,cAAA,CACZ7B,QAAQ,CAAC,CACPG,IAAI,CAAEV,kBAAkB,CACxBW,OAAO,CAAE,CAAEK,GAAG,EAAAmB,cAAA,CAAEtB,GAAG,CAACI,QAAQ,UAAAkB,cAAA,iBAAZA,cAAA,CAAcjB,UAAU,CAAEC,MAAM,EAAAiB,cAAA,CAAEvB,GAAG,CAACI,QAAQ,UAAAmB,cAAA,iBAAZA,cAAA,CAAcjB,MAAO,CACzE,CAAC,CAAC,CACFZ,QAAQ,CAACV,QAAQ,CAAC,6BAA6B,CAAE,OAAO,CAAC,CAAC,CAC5D,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAwC,kBAAkB,CAAIC,gBAAgB,EAAK,KAAO,CAAA/B,QAAQ,EAAK,CAC1E,KAAM,CAAAgC,MAAM,CAAG,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAED,GAAI,CACF,KAAM,CAAAhC,GAAG,CAAG,KAAM,CAAAZ,KAAK,CAAC6C,IAAI,CAAC,oBAAoB,CAAEH,gBAAgB,CAAEC,MAAM,CAAC,CAC5EhC,QAAQ,CAAC,CACPG,IAAI,CAAET,mBAAmB,CACzBU,OAAO,CAAEH,GAAG,CAACI,IACf,CAAC,CAAC,CACFL,QAAQ,CAACV,QAAQ,CAAC,mCAAmC,CAAE,SAAS,CAAC,CAAC,CACpE,CAAE,MAAOgB,GAAG,CAAE,KAAA6B,cAAA,CAAAC,eAAA,CACZpC,QAAQ,CAAC,CACPG,IAAI,CAAEV,kBAAkB,CACxBW,OAAO,CAAE,CAAEK,GAAG,EAAA0B,cAAA,CAAE7B,GAAG,CAACI,QAAQ,UAAAyB,cAAA,iBAAZA,cAAA,CAAcxB,UAAU,CAAEC,MAAM,EAAAwB,eAAA,CAAE9B,GAAG,CAACI,QAAQ,UAAA0B,eAAA,iBAAZA,eAAA,CAAcxB,MAAO,CACzE,CAAC,CAAC,CACFZ,QAAQ,CAACV,QAAQ,CAAC,6BAA6B,CAAE,OAAO,CAAC,CAAC,CAC5D,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}